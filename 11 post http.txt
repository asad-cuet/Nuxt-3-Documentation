Static example:
===============
    script:
    ------
        const url='....'

        function onSubmit()
        {
            const response=useFetch(url,{
                method:"post",
                body:{email:'...',password:'...'}           //data will be pass in body as object
                })
        }



Dynamic example:
================

    template:
    ---------

        <form @submit.prevent="onSubmit">

        <input type="text" name="email" v-model="form.email">
        <input type="password" name="password" v-model="form.password">
        <button type="submit">Sign in</button>

        </form>



    script:
    ------
        const url='....'

        const form=reactive({
            email:'',
            password:'',
        })

        async function onSubmit()
        {
            const response=await useFetch(url,{
                method:"post",
                body:form          
                })
            console.log(response)
        }

Note:
=====
    -the response variable having object as a response, ehich have data,error keys

    - *** if we want to catch data or error directly as response, we need to use {data,error} instead of response

    - the data,error is ref value. Use data.value to access values in script, use just data in template


why need to use await:
======================
    -useFetch() took some time to give response, that is why we used await

    - when use await, we need to declare function as async function




Loading example:
================

    template:
    ---------

        <form @submit.prevent="onSubmit">

        <input type="text" name="email" v-model="form.email">
        <input type="password" name="password" v-model="form.password">
        <button type="submit">
            <span v-if="isLoading">Loading....</span>
            <span v-else>Sign in</span>
        </button>

        </form>



    script:
    ------
        const url='....'
        const isLoading=ref(false)

        const form=reactive({
            email:'',
            password:'',
        })

        async function onSubmit()
        {
            if(isLoading.value) return;    //if loading, doesn't do anything

            isLoading.value=true;
            const response=await useFetch(url,{
                method:"post",
                body:form          
                })

            isLoading.value=false
            console.log(response)
        }



Response Handling:
================

    template:
    ---------

        <div v-if="_error">
            <p>{{_error}}</p>
        </div>


        <form @submit.prevent="onSubmit">

        <input type="text" name="email" v-model="form.email">
        <input type="password" name="password" v-model="form.password">
        <button type="submit">
            <span v-if="isLoading">Loading....</span>
            <span v-else>Sign in</span>
        </button>

        </form>



    script:
    ------
        const url='....'
        const isLoading=ref(false)
        const _error=ref(null)

        const form=reactive({
            email:'',
            password:'',
        })

        async function onSubmit()
        {
            if(isLoading.value) return;    //if loading, doesn't do anything

            isLoading.value=true;
            const {data,error}=await useFetch(url,{
                method:"post",
                body:form          
                })

            isLoading.value=false
            console.log(response)

            if(error.value)
            {
                _error.value=error.value.data.value;
                return;
            }

            const auth= useAuth()   //see 10
            auth.value.isAuthenticated=true
            navigateTo(/dashboard)
        }